import * as apiTypes from '../types/api-types';
import { Logger } from '../types/common-types';
import { DebugAgentConfig } from './config';
import { ScanStats } from './scanner';
import { SourceMapper } from './sourcemapper';
export interface V8DebugApi {
    set: (breakpoint: apiTypes.Breakpoint, cb: (err: Error | null) => void) => void;
    clear: (breakpoint: apiTypes.Breakpoint) => boolean;
    wait: (breakpoint: apiTypes.Breakpoint, callback: (err?: Error) => void) => void;
    log: (breakpoint: apiTypes.Breakpoint, print: (format: string, exps: string[]) => void, shouldStop: () => boolean) => void;
    messages: {
        [key: string]: string;
    };
    numBreakpoints_: () => number;
    numListeners_: () => number;
}
export declare function create(logger_: Logger, config_: DebugAgentConfig, jsFiles_: ScanStats, sourcemapper_: SourceMapper): V8DebugApi | null;
export declare function findScripts(scriptPath: string, config: DebugAgentConfig, fileStats: ScanStats): string[];
/**
 * Given an list of available files and a script path to match, this function
 * tries to resolve the script to a (hopefully unique) match in the file list
 * disregarding the full path to the script. This can be useful because repo
 * file paths (that the UI has) may not necessarily be suffixes of the absolute
 * paths of the deployed files. This happens when the user deploys a
 * subdirectory of the repo.
 *
 * For example consider a file named `a/b.js` in the repo. If the
 * directory contents of `a` are deployed rather than the whole repo, we are not
 * going to have any file named `a/b.js` in the running Node process.
 *
 * We incrementally consider more components of the path until we find a unique
 * match, or return all the potential matches.
 *
 * @example findScriptsFuzzy('a/b.js', ['/d/b.js']) // -> ['/d/b.js']
 * @example findScriptsFuzzy('a/b.js', ['/c/b.js', '/d/b.js']); // -> []
 * @example findScriptsFuzzy('a/b.js', ['/x/a/b.js', '/y/a/b.js'])
 *                 // -> ['x/a/b.js', 'y/a/b.js']
 *
 * @param {string} scriptPath partial path to the script.
 * @param {array<string>} fileList an array of absolute paths of filenames
 *     available.
 * @return {array<string>} list of files that match.
 */
export declare function findScriptsFuzzy(scriptPath: string, fileList: string[]): string[];
